// Generated by gencpp from file my_msgs/GPS.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_GPS_H
#define MY_MSGS_MESSAGE_GPS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct GPS_
{
  typedef GPS_<ContainerAllocator> Type;

  GPS_()
    : lat(0.0)
    , lng(0.0)
    , speed(0.0)  {
    }
  GPS_(const ContainerAllocator& _alloc)
    : lat(0.0)
    , lng(0.0)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef double _lat_type;
  _lat_type lat;

   typedef double _lng_type;
  _lng_type lng;

   typedef double _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::my_msgs::GPS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::GPS_<ContainerAllocator> const> ConstPtr;

}; // struct GPS_

typedef ::my_msgs::GPS_<std::allocator<void> > GPS;

typedef boost::shared_ptr< ::my_msgs::GPS > GPSPtr;
typedef boost::shared_ptr< ::my_msgs::GPS const> GPSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::GPS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::GPS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_msgs::GPS_<ContainerAllocator1> & lhs, const ::my_msgs::GPS_<ContainerAllocator2> & rhs)
{
  return lhs.lat == rhs.lat &&
    lhs.lng == rhs.lng &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_msgs::GPS_<ContainerAllocator1> & lhs, const ::my_msgs::GPS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_msgs::GPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::GPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::GPS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::GPS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::GPS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::GPS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::GPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4f65926ca53cfcca37eb08ca1f88642";
  }

  static const char* value(const ::my_msgs::GPS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4f65926ca53cfccULL;
  static const uint64_t static_value2 = 0xa37eb08ca1f88642ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::GPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/GPS";
  }

  static const char* value(const ::my_msgs::GPS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::GPS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lat\n"
"float64 lng\n"
"float64 speed\n"
;
  }

  static const char* value(const ::my_msgs::GPS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::GPS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.lng);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::GPS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::GPS_<ContainerAllocator>& v)
  {
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "lng: ";
    Printer<double>::stream(s, indent + "  ", v.lng);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_GPS_H
